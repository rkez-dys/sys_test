目標: 設計書の作成とレビューを行い、前倒しで完成させる。
1.API設計書
2.画面設計書
3.共通設計書
4.帳票設計書
5.ファイル設計書
6.バッチ設計書
7.DB定義書

背景: 設計書の作成により、開発フェーズに向けて必要な情報を明確化し、効率的かつ正確な実装を行うため。早期完了により、開発フェーズのおける準備も行うため。

期限: 6月2週目とする。全体としては6月末の完了を予定としてしているが、課題解決、他の成果物の品質との精度を合わせるために前倒しの期限を設定する。

水準: 期限までに以下の水準を達成する。
1.担当設計書の完成度：100%
2.レビュー完了率: 100%

手段:
1.要件分析と仕様定義: 検針領域の要件を詳細に分析し、仕様を定義する。必要に応じて関係者とのミーティングを行い、合意を得る。
2.設計ドキュメントの作成: 設計書に要件の内容を満たす機能を記述する。また、各項目に関して明確かつ詳細な説明を記述する。
3.レビューとフィードバックの収集: 設計書をレビューを行い、フィードバックをする。フィードバックを元に改善と全体への周知をを行い、成果物の品質向上を行う。
4.文書の正確性の確認: 文書内の情報が正確かつ完全であることを確認するため、情報が曖昧な箇所は、過去の資料や、関係者との確認を行う。
5.設計されている機能の実現性の確認: 開発チームやアーキテクトを検討して、システムに関連する技術的な制約や制限事項を洗い出し、提案された機能や要件が技術的に実装可能であるかどうかを検討する。



目標: 品質が高く、検針チーム全体として統一感のある設計書を作成する。

背景: 実装の方向性や詳細を把握しやすくすることで、迷いや修正の必要性が減り、効率的な開発が可能とする。また、変更が必要になった際に変更の影響を正確に評価し、迅速に対応するため。

期限: 7月開始の開発フェーズまでとする。

水準: 期限までの以下の水準を達成する。
1.検針チームとして定めた品質を満たしいてる設計書の完成率：100%

手段:
1.設計書の作成におけるルール作成: 設計書の記載内容を統一化させるために、記載内容の粒度、用語を明確化させる。
2.用語の明確化: 専門用語や略語を使用する際は、用語集を作成する。使用される用語が明確であることを確認するために、用語集の用語のレビューを適宜実施する。
3.図表や表の活用: 言葉だけでは表現しづらい箇所は、図表や表を使用して、複雑な情報を視覚的に整理し、明確に表現する。チームメンバーによるフィードバックを求めて、図表や表が理解しやすいかを確認する。
4.読み手の理解度の確認: 設計書のレビューを行い、作成者の理解度を確認する。理解度が低い箇所を特定し、それらの箇所を改善させる。



目標: 開発フェーズに向けた準備資料の作成

背景: 開発チームから提供されている開発方針だけでは、情報が充足しておらず、開発フェーズが始まったときに障害となる可能性を無くすため。

期限: 7月開始の開発フェーズまでとする。

水準: 期限までの以下の水準を達成する。
1.コーティングの方法、方針が理解できていない人: 0人

手段:
1.クラス構成の説明: 外部設計時に一部着手していた内容から開発フェーズになると変更となる箇所を明記し、説明を行う。
2.コーディングにおけるルール作成: 保守性と可読性を高めるために、ルールを定義し、文書化を行う。



目標: 先行着手機能の実装を完了し、テストを通過する。

背景: 10月までの単体テスト完了が目標であり、プロジェクト全体の進捗に影響を与える可能性がある。そのため、担当機能の作成を迅速かつ正確に行うことが必要とされる。

水準:
先行着手機能の実装完了率: 100%
バグレポート件数: 0件

手段:
1.コーディングとテスト: 各タスクに取り組み、実装を行う。コードの品質を確保する。テストケースを作成し、自動化テストの実装の準備をする。
2.定期的な進捗報告と課題解決: 進捗状況を定期的に報告し、開発統括、メンバーとのコミュニケーションを行い、課題を解決する。
3.コードレビュー: コーディングのレビューを行うに際してのレビュー観点を作成し、全体の品質を向上させる。



目標: 単体テストケースの作成

背景: 開発フェーズ後の単体テストフェーズを円滑に行うため。また、開発したソフトウェアの品質担保とテストカバレッジ率の水準をクリアするため。

期限: 単体テストフェーズ開始まで

水準: 期限までの以下の水準を達成する。
1.テストカバレッジ率: 100%。

手段: 
1.要件の分析: プロジェクトの要件を分析し、重要な機能やユースケースを特定します。
2.テストケースの設計: 各機能やユースケースに対して、異なるシナリオや条件に基づいてテストケースを網羅的に設計します。
3.テストコードの作成: 設計したテストケースに基づいて、テストコードを作成します。テストフレームワークを利用して、テストスイートを組み立てます。


