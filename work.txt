割れた窓から始まる品質低下 〜他人のコードを修正して気づいたこと〜

4月から他社が作成した設計書やソースコードの修正をを行っています。
その中でふと、『割れた窓ガラス理論（Broken Windows Theory）』という話を思い出しました。

■割れた窓ガラス理論とは？
「アメリカの犯罪学者が提唱した理論で、「建物の窓が1枚割れているのを放置しておくと、やがて他の窓も次々と割られていく」というものです。」
小さな乱れや荒れをそのままにすると、「誰も管理していない」「壊してもいい」という空気が生まれ、環境全体の秩序やモラルが崩れていく、という内容です。

■開発現場にも当てはまる
この話は、システム開発でもまったく同じことが起きます。
私が今回関わっているコードには、以下のような“小さな乱れ”がたくさんありました。
・命名が曖昧な変数や関数（開発規約で決まっていますが守られていないことが多いです。。。）
・コメントがなく、何をしているのか分からないロジック
・明らかに設計と合っていない構造
・使われていない関数やファイルの放置

作業する前は「少し整えるだけ」と思っていたのですが、手を入れるたびに新しい問題が出てきて、修正作業はどんどん深く・重くなっています。

■自分自身への教訓
修正作業を通じて強く感じたのは、「小さな乱れは早く直すべき」ということです。
そして「自分が触れるコードは、誰かにとっての見本になるように」という意識も大切だと痛感しました。
たとえば、以下のような行動を積み重ねることが、割れた窓を放置しない開発につながると思います。
・少しでも違和感のあるコードはコメントで補足する
・命名には意図を込める（読み手が迷わないように）
・ドキュメントが足りなければ、最低限の説明を残す
・コードレビューでは「何が正しいか」より「なぜそう書くのか」に注目する

■最後に
「このくらいなら大丈夫だろう」「自分がわかればいいだろう」と思って書いたコードは、後になって必ず自分や誰かを苦しめます。
逆に、丁寧に積み上げられたコードや設計は、見た瞬間にチームの文化や信頼感を感じさせます。

システム開発の現場では、窓が割れそうになったらすぐに修理すること。
それが結果的に、品質の高いプロジェクトをつくる第一歩になると、私は今回の経験で学びました。
