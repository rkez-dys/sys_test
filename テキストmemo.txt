通常のReactを使ったフロントエンド開発とReact Hook Form + Zodを使った開発の違いと特徴①

以前の案件で「React」を使用したフォーム開発をしておりましたが、今回の案件では「React Hook Form」+「Zod」という2つのライブラリを組み合わせたフォーム開発をしております。それぞれ異なる特徴と利点があると感じましたのでまとめてみました。

■従来のReactを使用したフォーム開発の特徴

1. 状態管理
通常のReactでフォームを開発する場合、フォームデータはuseStateフックを使用して状態管理します。フォームフィールドごとに個別の状態変数を定義し、それを変更するためにonChangeイベントハンドラを使います。

import React, { useState, ChangeEvent, FormEvent } from 'react';

const SimpleForm: React.FC = () => {
  const [name, setName] = useState<string>('');
  const [email, setEmail] = useState<string>('');

  const handleSubmit = (event: FormEvent<HTMLFormElement>): void => {
    event.preventDefault();
    console.log({ name, email });
  };

  const handleNameChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setName(event.target.value);
  };

  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>): void => {
    setEmail(event.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type='text'
        value={name}
        onChange={handleNameChange}
      />
      <input
        type='email'
        value={email}
        onChange={handleEmailChange}
      />
      <button type='submit'>Submit</button>
    </form>
  );
};

export default SimpleForm;

2. バリデーション
バリデーションを追加する場合、通常はイベントハンドラ内でバリデーションロジックを手動で実装します。たとえば、if文を使って入力内容をチェックし、不正な入力があればエラーメッセージを表示します。

const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {
  event.preventDefault();

  if (name === '') {
    alert('Name is required');
    return;
  }

  if (!email.includes('@')) {
    alert('Invalid email');
    return;
  }

  console.log({ name, email });
};

3. パフォーマンス
フォームの入力ごとにuseStateを使って状態を更新すると、再レンダリングが頻繁に発生するため、フォームが複雑になるほどパフォーマンスが低下する可能性があります。特に大規模なフォームでは、これが問題となることがあります。


■React単体での開発のメリット

1. 柔軟なカスタマイズ: 
状態やバリデーションを自由に設計できるため、細かな要件に対応しやすいです。

2. 追加ライブラリが不要: 
フォーム管理のために外部ライブラリを導入する必要がなく、依存関係が少ないため、プロジェクトの構成がシンプルになります。

3. 軽量で最小限のセットアップ: 
最小限のコードで簡単にフォームを作成でき、初期設定が少ないのが特徴です。

以上のようなことから、React単体での開発は、小規模なアプリケーションやシンプルなフォームに特に適していると感じます。

次回は、React Hook Form + Zodを使った開発をまとめたいと思います。


通常のReactを使ったフロントエンド開発とReact Hook Form + Zodを使った開発の違いと特徴②

■React Hook Form + Zodを使用したフォーム開発の特徴

1. 簡潔な状態管理
React Hook Formでは、useFormフックを使ってフォーム全体の状態を管理します。フォームフィールドはregisterメソッドで簡単に登録でき、useStateによる煩雑な状態管理が不要です。

import { useForm, SubmitHandler } from 'react-hook-form';

type FormValues = {
  name: string;
  email: string;
};

const HookForm: React.FC = () => {
  const { register, handleSubmit } = useForm<FormValues>();

  const onSubmit: SubmitHandler<FormValues> = (data): void => {
    console.log(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('name')} />
      <input {...register('email')} />
      <button type='submit'>Submit</button>
    </form>
  );
};

export default HookForm;

2. スキーマベースのバリデーション（Zodとの統合）
Zodを使うことで、バリデーションロジックを明確なスキーマとして定義し、それをReact Hook Formと組み合わせることで一貫したバリデーションを行うことができます。resolverを用いて、React Hook FormにZodのスキーマバリデーションを統合します。

import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const schema = z.object({
  name: z.string().min(1, 'Name is required'),
  email: z.string().email('Invalid email address'),
});

// フォームのデータ型を定義
type FormValues = z.infer<typeof schema>;

const HookFormWithValidation: React.FC = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormValues>({
    resolver: zodResolver(schema),
  });

  const onSubmit: SubmitHandler<FormValues> = (data) => {
    console.log(data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input {...register('name')} />
      {errors.name && <p>{errors.name?.message}</p>}
      
      <input {...register('email')} />
      {errors.email && <p>{errors.email?.message}</p>}
      
      <button type='submit'>Submit</button>
    </form>
  );
};

export default HookFormWithValidation;

3. パフォーマンス
React Hook Formは、フォームフィールドの状態管理を最適化しており、入力ごとの再レンダリングを最小限に抑えます。これにより、複雑なフォームでもパフォーマンスを維持しやすくなります。また、uncontrolled componentsとしてフィールドを扱うため、Reactの再レンダリングルールに沿って効率的に動作します。

4. フォームエラーのハンドリング
エラーメッセージの管理がシンプルで、formState.errorsを通じてバリデーションエラーを簡単に表示できます。Zodとの連携によって、スキーマに基づくエラーメッセージを自動的に生成し、フォームに表示できます。


■React Hook Form + Zodを使用するメリット

1. 効率的な状態管理: 
状態管理を簡素化し、不要な再レンダリングを回避できるため、特に大規模なフォームでのパフォーマンスが向上します。

2. スキーマ駆動のバリデーション: 
Zodを使うことでスキーマベースで一貫したバリデーションが可能なため、複雑なフォームでのミスが減少します。

3. 簡単なエラーハンドリング: 
バリデーションエラーの処理が直感的で、ユーザーに対してわかりやすいエラーメッセージを提供できます。

4. パフォーマンスの向上: 
React Hook Formの最適化された再レンダリングによって、大規模フォームでのパフォーマンス問題を軽減します。


以上のようなことから、フィールドが多く、複雑なバリデーションが必要な場合は、React Hook FormとZodの組み合わせが開発しやすいと感じます。特に、型安全なバリデーションや、最適化された再レンダリングは非常に開発しやすいです。


■まとめ
通常のReactを使用したフォーム開発は、小規模なフォームには適していると思います、状態管理やバリデーションの複雑さが増すと、開発が煩雑になります。React Hook FormとZodを組み合わせることで、状態管理やバリデーションが効率化され、特に大規模なフォームや複雑なフォーム開発では大幅にパフォーマンスや開発効率が向上すると思いました。
